version: "3.8"

services:
  apollo:
    image: hrbolek/apollo_federation
    # image: apollofederation:latest
    environment:
      # promenne, ktere lze cist v kontejneru
      # SERVICES je json array popisujici jednotlive dostupne sluzby
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "events", "url": "http://gql_events:8000/gql"},
          {"name": "ug", "url": "http://gql_ug:8000/gql"}
        ]
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
      # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 33000:3000
    depends_on:
      - gql_events

  gql_events:
      # image: nafreju2/gql_events # where u user.events
      # image: dangquytaikb/gql_events:latest
      image: hrbolek/gql_events
      container_name: gql_events
      environment:
        # link na db mimo stack
        # - POSTGRES_HOST=host.docker.internal:5432
        - POSTGRES_HOST=postgres_gql:5432
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=example
        - POSTGRES_DB=data
        - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
        - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
        - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
        - DEMO=False
        - DEMODATA=True
      healthcheck:
        # definice, umoznujici provest test, zda je kontejner v poradku
        test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
        interval: 60s
        retries: 3
        start_period: 60s
        timeout: 10s
      # deploy:
      #   replicas: 3
      restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
      # ports:
      #   - 33331:8000
      depends_on:
        - postgres_gql


  gql_ug:
    # image: dangquytaikb/gql_ug:latest
    image: hrbolek/gql_ug
    container_name: gql_ug
    environment:
        - POSTGRES_HOST=postgres_gql:5432
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=example
        - POSTGRES_DB=data
        - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
        - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
        - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
        - DEMO=False
        - DEMODATA=True
    healthcheck:
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    depends_on:
      - postgres_gql

  postgres_gql:
    image: postgres
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports:
      - 5432:5432

  postgres_credentials:
    image: postgres
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 60s
      timeout: 10s
      retries: 5
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

  pgadmin:
    image: dpage/pgadmin4
    restart: always
    environment:
      # promenne, ktere lze cist v kontejneru
      - PGADMIN_DEFAULT_EMAIL=anoyne@anywhere.com
      - PGADMIN_DEFAULT_PASSWORD=example
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 60s
      timeout: 10s
      retries: 5
    ports:
      - 31122:80

