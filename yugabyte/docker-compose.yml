version: '3.9'



services:
  yugabyte1:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte1
    ports:
      - "7000:7000"
      - "9000:9000"   # rebind because of portainer
      - "15433:15433" # cluster GUI
      - "5433:5433"
      - "9042:9042"
    command: ["bin/yugabyted", "start", "--daemon=false"]


  yugabyte2:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte2   
    command: ["bin/yugabyted", "start", "--daemon=false", "--join=yugabyte1"]
    depends_on:
      - yugabyte1
    restart: on-failure:10


  yugabyte3:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte3
    command: ["bin/yugabyted", "start", "--daemon=false", "--join=yugabyte1"]
    depends_on:
      - yugabyte1
    restart: on-failure:10

  yugabyte-init:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte-init
    depends_on:
      - yugabyte1
      - yugabyte2
      - yugabyte3
    entrypoint: /bin/sh
    command: -c "sleep 20 && /home/yugabyte/bin/ysqlsh --echo-queries --host yugabyte1 -U postgres -d postgres -c 'CREATE DATABASE myyudb;'"



############# apollo #######################
  apollo:
    image: hrbolek/apollo_federation:latest
    container_name: apollo
    environment:
      # promenne, ktere lze cist v kontejneru
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "ug", "url": "http://gql_ug:8000/gql"},
          {"name": "forms", "url": "http://gql_forms:8000/gql"},
        ]
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
    #   # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 33000:3000
    depends_on:
      # - yugabyte1
      # - yugabyte2
      # - yugabyte3
      - gql_forms
      - gql_ug
   

  gql_forms:
    image: hrbolek/gql_forms:latest
    container_name: forms_Hrbolek
    environment:
      # promenne, ktere lze cist v kontejneru
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql/ || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
  
    depends_on:
      # postgres:
      #   condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      frontend:
        condition: service_started
    
    # ports:
    #   - 31127:8000  # ray made this port number up
  
  
  gql_ug:
    image: hrbolek/gql_ug:latest
    container_name: gql_ug

    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - GQLUG_ENDPOINT_URL=http://gql_ug_hrbolek:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=True
    
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s
    restart: on-failure:30 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    
    depends_on:
      # postgres:
      #   condition: service_started
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
      
######################## frontend ##############################
  frontend:
    image: hrbolek/frontend
    container_name: frontend
    environment:
      - DEMO=False
      - GQL_PROXY=http://apollo:3000/api/gql/
    ports:
      - 33080:8000