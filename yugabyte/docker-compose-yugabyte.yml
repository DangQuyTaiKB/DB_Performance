version: "3.8"

services:


  yugabyte1:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte1
    ports:
      - "7000:7000"
      - "9000:9000"   # rebind because of portainer
      - "15433:15433" # cluster GUI
      - "5433:5433"
      - "9042:9042"
    command: ["bin/yugabyted", "start", "--daemon=false"]

  yugabyte2:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte2   
    command: ["bin/yugabyted", "start", "--daemon=false", "--join=yugabyte1"]
    depends_on:
      - yugabyte1
    restart: on-failure:10

  yugabyte3:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte3
    command: ["bin/yugabyted", "start", "--daemon=false", "--join=yugabyte1"]
    depends_on:
      - yugabyte1
    restart: on-failure:10

  yugabyte-init:
    image: yugabytedb/yugabyte:2.19.3.0-b140
    container_name: yugabyte-init
    depends_on:
      - yugabyte1
      - yugabyte2
      - yugabyte3
    entrypoint: /bin/sh
    command: -c "sleep 20 && /home/yugabyte/bin/ysqlsh --echo-queries --host yugabyte1 -U postgres -d postgres -c 'CREATE DATABASE data;'"
    # command: -c "sleep 20 && /home/yugabyte/bin/ysqlsh --echo-queries --host yugabyte1 -U postgres -d postgres -c \"DO $$ BEGIN IF NOT EXISTS (SELECT FROM pg_database WHERE datname = 'data') THEN CREATE DATABASE data; END IF; END $$;\""
    

################## frontend #######################
  frontend:
    image: hrbolek/frontend
    environment:
      - DEMO=False
      - DEMODATA=True
      # link na db mimo stack
      # - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_HOST=yugabyte1:5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - GQL_PROXY=http://apollo:3000/api/gql/
      - SALT=fe1c71b2-74c0-41e5-978f-eecbffac7418
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu)
      test: "curl -f -X GET http://localhost:8000/ || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy

    ports:
      - 33001:8000
    # volumes:
    # # for development
    #   - ./server/htmls:/app/server/htmls
    #   - ./server/config.json:/app/server/config.json
# ############# apollo #######################

  apollo:
    image: hrbolek/apollo_federation
    # image: apollofederation:latest
    environment:
      # promenne, ktere lze cist v kontejneru
      # SERVICES je json array popisujici jednotlive dostupne sluzby
      - PORT=3000
      - |
        SERVICES=
        [
          {"name": "ug", "url": "http://gql_ug:8000/gql"},
          {"name": "forms", "url": "http://gql_forms:8000/gql"},
          {"name": "granting", "url": "http://gql_granting:8000/gql"},
          {"name": "facilities", "url": "http://gql_facilities:8000/gql"},
          {"name": "events", "url": "http://gql_events:8000/gql"}
        ]       
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku (vsimnete si portu a srovnejte s portem v environment)
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    ports: #v deploymentu by nebylo zadne mapovani portu
      # vnejsi port : port, kde sluzbu poskytuje kontejner
      - 33000:3000
    depends_on:
      - gql_ug
      - gql_forms
      - gql_events
      - gql_granting
      - gql_facilities

  gql_ug:
    image: hrbolek/gql_ug #   image: kavic/ug
    environment:
      # link na db mimo stack
      # - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_HOST=yugabyte1:5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=False
      - DEMODATA=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    # ports:
    #   - 33012:8000
    depends_on:
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully

  gql_events:
    # image: nafreju2/gql_events # where u user.events
    image: hrbolek/gql_events # where u user.events
    environment:
      # link na db mimo stack
      # - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_HOST=yugabyte1:5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=False
      - DEMODATA=True
    # ports:
    #   - 33331:8000
    depends_on:
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully

  gql_facilities:
    image: hrbolek/gql_facilities 
    environment:
      # link na db mimo stack
      # - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_HOST=yugabyte1:5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=False
      - DEMODATA=True
    # ports:
    #   - 33331:8000
    depends_on:
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully

  gql_granting:
    image: hrbolek/gql_granting # where u user.events
    environment:
      # link na db mimo stack
      # - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_HOST=yugabyte1:5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=False
      - DEMODATA=True
    depends_on:
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully

  gql_forms:
    image: hrbolek/gql_forms
    environment:
      # link na db mimo stack
      # - POSTGRES_HOST=host.docker.internal:5432
      - POSTGRES_HOST=yugabyte1:5433
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=example
      - POSTGRES_DB=data
      - GQLUG_ENDPOINT_URL=http://gql_ug:8000/gql
      - JWTPUBLICKEYURL=http://frontend:8000/oauth/publickey
      - JWTRESOLVEUSERPATHURL=http://frontend:8000/oauth/userinfo
      - DEMO=False
      - DEMODATA=True
    healthcheck:
      # definice, umoznujici provest test, zda je kontejner v poradku
      test: "curl -f -H 'Content-Type: application/json' -X POST -d '{\"query\":\"query{__schema{types{name}}}\"}' http://localhost:8000/gql || exit 1"
      interval: 60s
      retries: 3
      start_period: 60s
      timeout: 10s
    restart: on-failure:3 # nedojde k restartu pokud je kontejner "unhealthy", maximalne 3 pokusy
    # ports:
    #   - 33013:8000
    depends_on:
      yugabyte1:
        condition: service_started
      yugabyte2:
        condition: service_started
      yugabyte3:
        condition: service_started
      yugabyte-init:
        condition: service_completed_successfully
  


  prometheus:
    image: prom/prometheus
    restart: always
    volumes:
      - ./prometheus:/etc/prometheus/
      # - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    # links:
    #   - cadvisor:cadvisor
    #   - alertmanager:alertmanager
    # depends_on:
    #   - cadvisor

  grafana:
    image: grafana/grafana
    user: '472'
    restart: always
    environment:
      GF_INSTALL_PLUGINS: 'grafana-clock-panel,grafana-simple-json-datasource'
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: grafana
    # volumes:
    #   - grafana_data:/var/lib/grafana
    #   - ./grafana/provisioning/:/etc/grafana/provisioning/
    # env_file:
    #   - ./grafana/config.monitoring
    ports:
      - 8300:3000
    depends_on:
      - prometheus

    
  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "${CADVISOR_PORT:-8080}:8080"
    restart: always